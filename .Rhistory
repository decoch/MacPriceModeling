## result
##============================================
## setting
##============================================
library(ggplot2)
library(dplyr)
first_data <- read.csv(file = "/Users/akifumi.tominaga/DataScienceProject/MacPriceModeling/data/mac_price_150717.csv", fileEncoding = "utf-8") # import
##============================================
## first task
##============================================
# df
df <- first_data %>%
select(product, price) %>%
filter(product == "macbook" | product =="macbook_air" | product == "macbook_pro")
# add product_detail and product_category to df
price_df<-transform(df,product_detail=c(
"01_macbook_low",
"02_macbook_high",
"03_macbook_air_11inch_low",
"04_macbook_air_11inch_high",
"05_macbook_air_13inch_low",
"06_macbook_air_13inch_high",
"07_macbook_pro_13inch",
"08_macbook_pro_retina_13inch_low",
"09_macbook_pro_retina_13inch_middle",
"10_macbook_pro_retina_13inch_high",
"11_macbook_pro_retina_15inch_low",
"12_macbook_pro_retina_15inch_high"
))
price_df<-transform(price_df,product_category=c(
"macbook",
"macbook",
"macbook_air_11inch",
"macbook_air_11inch",
"macbook_air_13inch",
"macbook_air_13inch",
"macbook_pro_13inch",
"macbook_pro_retina_13inch",
"macbook_pro_retina_13inch",
"macbook_pro_retina_13inch",
"macbook_pro_retina_15inch",
"macbook_pro_retina_15inch"
))
# ggplot create data frame
g <- ggplot(
price_df,                  # ggplot dataframe
aes (                      # ggplot set option
x = product_detail,
y = price,
fill = product_category  # color by product_category
)
)
# graph_design
g <- g + theme(axis.text.x = element_text(angle = 45, hjust = 1)) # setting angle of x-axis text
g <- g + geom_bar(
width = 0.8,               # bar width
stat = "identity"
)
g <- g + xlab("product_detail")                # name of x-axis
g <- g + ylab("Price(yen)")                    # name of y-axis
g <- g + ggtitle("Compare prices of MacBook")  # name of graph
plot(g)
##============================================
## task2
##============================================
## info
##============================================
# 参考サイト(http://logics-of-blue.com/%E3%83%A2%E3%83%87%E3%83%AB%E9%81%B8%E6%8A%9E_%E5%AE%9F%E8%B7%B5%E7%B7%A8/)
# install.packages("MuMIn") # require only first
library(MuMIn)
## setting data
##============================================
tmp_df <- first_data %>%
select(product, price, display_type, display_size, memory_size, cpu_core_cnt, cpu_clock, strage_type, strage_volume) %>%
filter(product == "macbook" | product =="macbook_air" | product == "macbook_pro")
tmp_df$display_type <- ifelse(tmp_df$display_type=="retina", 1, 0)
tmp_df$strage_type <- ifelse(tmp_df$strage_type=="flash", 1, 0)
tmp_df <- transform(tmp_df,gpu_bentchmark=c(
372,
372,
778,
778,
778,
778,
454,
947,
947,
947,
1191,
1191
))
task2_df <- tmp_df
## modeling
##============================================
model <- lm(price~display_type + display_size + memory_size + cpu_core_cnt + cpu_clock + strage_type + strage_volume + gpu_bentchmark, data=task2_df)
model <- lm(price~display_size + memory_size + cpu_clock + strage_type + strage_volume, data=task2_df)
# model <- lm(price~display_size + memory_size + cpu_clock + strage_type + strage_volume, data=task2_df)
# model <- lm(price~display_size + memory_size + cpu_core_cnt + cpu_clock + strage_volume + gpu_bentchmark, data=task2_df)
summary(model)
AIC(model)
kekka.AIC<-dredge(model,rank="AIC")
kekka.AIC
model
ans_model <- kekka.AIC[1]
ans_model <- lm(price ~ display_size + memory_size + cpu_clock +
strage_type + strage_volume, data = task2_df)
ans_model
plot(ans_model)
first_data <- read.csv(file = "./data/mac_price_150717.csv", fileEncoding = "utf-8") # import
install.packages(ggplot2)
install.packages(
"ggplot"
)
install.packages("ggplot2")
install.packages("ggplot2")
##============================================
## info
##============================================
## install package
##============================================
install.packages("MuMIn") # require only first
install.packages("ggplot2")
install.packages("dplyr")
## setting
##============================================
library(ggplot2)
library(dplyr)
first_data <- read.csv(file = "./data/mac_price_150717.csv", fileEncoding = "utf-8") # import
##============================================
## first task
##============================================
# df
df <- first_data %>%
select(product, price) %>%
filter(product == "macbook" | product =="macbook_air" | product == "macbook_pro")
# add product_detail and product_category to df
price_df<-transform(df,product_detail=c(
"01_macbook_low",
"02_macbook_high",
"03_macbook_air_11inch_low",
"04_macbook_air_11inch_high",
"05_macbook_air_13inch_low",
"06_macbook_air_13inch_high",
"07_macbook_pro_13inch",
"08_macbook_pro_retina_13inch_low",
"09_macbook_pro_retina_13inch_middle",
"10_macbook_pro_retina_13inch_high",
"11_macbook_pro_retina_15inch_low",
"12_macbook_pro_retina_15inch_high"
))
price_df<-transform(price_df,product_category=c(
"macbook",
"macbook",
"macbook_air_11inch",
"macbook_air_11inch",
"macbook_air_13inch",
"macbook_air_13inch",
"macbook_pro_13inch",
"macbook_pro_retina_13inch",
"macbook_pro_retina_13inch",
"macbook_pro_retina_13inch",
"macbook_pro_retina_15inch",
"macbook_pro_retina_15inch"
))
# ggplot create data frame
g <- ggplot(
price_df,                  # ggplot dataframe
aes (                      # ggplot set option
x = product_detail,
y = price,
fill = product_category  # color by product_category
)
)
# graph_design
g <- g + theme(axis.text.x = element_text(angle = 45, hjust = 1)) # setting angle of x-axis text
g <- g + geom_bar(
width = 0.8,               # bar width
stat = "identity"
)
g <- g + xlab("product_detail")                # name of x-axis
g <- g + ylab("Price(yen)")                    # name of y-axis
g <- g + ggtitle("Compare prices of MacBook")  # name of graph
plot(g)
##============================================
## task2
##============================================
## info
##============================================
# 参考サイト(http://logics-of-blue.com/%E3%83%A2%E3%83%87%E3%83%AB%E9%81%B8%E6%8A%9E_%E5%AE%9F%E8%B7%B5%E7%B7%A8/)
library(MuMIn)
## setting data
##============================================
tmp_df <- first_data %>%
select(product, price, display_type, display_size, memory_size, cpu_core_cnt, cpu_clock, strage_type, strage_volume) %>%
filter(product == "macbook" | product =="macbook_air" | product == "macbook_pro")
tmp_df$display_type <- ifelse(tmp_df$display_type=="retina", 1, 0)
tmp_df$strage_type <- ifelse(tmp_df$strage_type=="flash", 1, 0)
tmp_df <- transform(tmp_df,gpu_bentchmark=c(
372,
372,
778,
778,
778,
778,
454,
947,
947,
947,
1191,
1191
))
task2_df <- tmp_df
## modeling
##============================================
model <- lm(price~display_type + display_size + memory_size + cpu_core_cnt + cpu_clock + strage_type + strage_volume + gpu_bentchmark, data=task2_df)
model <- lm(price~display_size + memory_size + cpu_clock + strage_type + strage_volume, data=task2_df)
# model <- lm(price~display_size + memory_size + cpu_clock + strage_type + strage_volume, data=task2_df)
# model <- lm(price~display_size + memory_size + cpu_core_cnt + cpu_clock + strage_volume + gpu_bentchmark, data=task2_df)
summary(model)
AIC(model)
kekka.AIC<-dredge(model,rank="AIC")
kekka.AIC
model
ans_model <- kekka.AIC[1]
ans_model <- lm(price ~ display_size + memory_size + cpu_clock +
strage_type + strage_volume, data = task2_df)
ans_model
plot(ans_model)
kekka.AIC
model
summary(model)
View(task2_df)
model
model <- lm(price~display_type + display_size + memory_size + cpu_core_cnt + cpu_clock + strage_type + strage_volume + gpu_bentchmark, data=task2_df)
summary(model)
kekka.AIC<-dredge(model,rank="AIC")
options(na.action = "na.fail")
kekka.AIC<-dredge(model,rank="AIC")
kekka.AIC
model <- lm(price~display_size + memory_size + cpu_core_cnt + cpu_clock + strage_type + strage_volume, data=task2_df)
summary(model)
AIC(model)
options(na.action = "na.fail")
kekka.AIC<-dredge(model,rank="AIC")
kekka.AIC
model <- lm(price~display_size + memory_size + cpu_clock + strage_type + strage_volume, data=task2_df)
summary(model)
AIC(model)
options(na.action = "na.fail")
kekka.AIC<-dredge(model,rank="AIC")
kekka.AIC
model
model <- lm(price~display_type + display_size + memory_size + cpu_core_cnt + cpu_clock + strage_type + strage_volume, data=task2_df)
summary(model)
AIC(model)
options(na.action = "na.fail")
kekka.AIC<-dredge(model,rank="AIC")
kekka.AIC
model <- lm(price~display_size + memory_size + cpu_clock + strage_type + strage_volume, data=task2_df)
summary(model)
AIC(model)
options(na.action = "na.fail")
kekka.AIC<-dredge(model,rank="AIC")
kekka.AIC
## 課題と目的
---
title: "macbookの製品分析と価格モデリング"
output: html_document
---
-----
## 課題と目的
1. **価格とスペックに関するグラフを作成せよ。**
- データの傾向を把握できるか？
- 意思決定において重要な要素を考慮してグラフが作れるか？
- 多数の要素をわかりやすくグラフにまとめることができるか？
2. **macbook製品の価格モデルを作成し、検証せよ。**
- 妥当な論理でモデリングができるか？
- 多重共線性を回避する方法を理解しているか？
- 正しくモデル選択ができるか？
- モデルの妥当性を評価できるか？
-----
## 課題1.価格とスペックに関するグラフを作成せよ。
```{r, echo = FALSE, warning = FALSE ,message = FALSE}
options(width = 120)  # 結果を見やすくするように表示幅を拡大
# 下記のパッケージで初めて使うものがあれば、別途インストールすること
# install.packages("パッケージ名")
library(MASS)
library(dplyr)
library(ggplot2)
require(gridExtra)  # ggplotのグラフを並べるためにロード
library(scales)  # ggplot関数で  scale_y_continuous(labels = percent) を使うためにロード
library(coefplot)  # coefplot関数を使うためにロード
# macでグラフのタイトルやラベルに日本語を使うための設定
old = theme_set(theme_bw(base_family="HiraKakuProN-W3"))
df <- read.csv(file = "./data/mac_price_150717.csv")
Preprocessing <- function(df){
# 順位が存在する水準（display_type, gpu, cpu, strage_type）について順序を定める
#
# Args:
#   df: 読み込んだデータフレーム
# Returns:
#   水準間に順位がついたデータフレーム
df$display_type <- ordered(df$display_type, levels = c("non_retina",
"retina",
"retina_5k"))
df$gpu <- ordered(df$gpu, levels = c("intel_hd_graphics_4000",
"intel_hd_graphics_5000",
"intel_hd_graphics_5300",
"intel_hd_graphics_6000",
"intel_hd_graphics_6100",
"intel_iris_graphics",
"intel_iris_pro_graphics",
"nvidia_geforce_gt_750m",
"nvidia_geforce_gt_755m",
"amd_radeon_r9_m290",
"amd_radeon_r9_m290x",
"amd_raeon_r9_m370x",
"amd_firepro_d300",
"amd_firepro_d500"))
df$cpu <- ordered(df$cpu, levels = c("intel_core_m",
"intel_core_i5",
"intel_core_i7",
"intel_xeon_e5"))
df$strage_type <- ordered(df$strage_type, levels = c("hard_drive",
"fusion_drive",
"flash"))
return(df)
}
ColumnSelect <- function(df){
# 分析に必要なカラムを選択する
#
# Args:
#   df: 読み込んだデータフレーム
# Returns:
#   必要なカラムだけが残っている
selected.df <- df[,c(
# "product_type",
"product",
"display_type",
"display_size",
# "height",
# "width",
# "depth",
# "weight",
"memory_size",
# "gpu",
# "gpu_cnt",
# "cpu",
"cpu_core_cnt",
"cpu_clock",
"strage_type",
"strage_volume",
"price")]
return(selected.df)
}
# 前処理を実行
all <-df %>%
Preprocessing()
```
```{r, echo = FALSE, warning = FALSE ,message = FALSE, fig.width = 10}
# ノートブックタイプのみのデータフレームを作成
notebook <- all %>%
filter(product_type == "notebook") %>%
ColumnSelect()
# 余計な水準を削除
notebook$product <- droplevels(notebook$product)
notebook$display_type <- droplevels(notebook$display_type)
notebook$strage_type <- droplevels(notebook$strage_type)
```
###分析データの確認
####ローデータの確認
対象となるデータの全体像を把握するため、ローデータを参照する。
データはアップルストアの公式HPから取得した。（http://www.apple.com/jp/mac/）
macbook系の製品データは12個で、9個の属性を持つ。
```{r, echo = FALSE, warning = FALSE ,message = FALSE, fig.width = 10}
notebook
```
質的変数については名義尺度と順序尺度があ。その区別はモデリングの際に重要なため、適切な形にデータ型を変換する。
- product：名義尺度
- display_type：順序尺度（non_retina < retina）
- strage_type：順序尺度（hard_drive < flash）
```{r, echo = FALSE, warning = FALSE ,message = FALSE, fig.width = 10}
str(notebook)
```
####プロット図の作成
主要な量的変数について、プロット図から相関関係を把握する。
概ねどの変数同士についても高い相関が認められそうである。
特にpriceにおいてその傾向は顕著であるが、strage_volumeについては他の変数との相関は低いと思われる。
```{r, echo = FALSE, warning = FALSE ,message = FALSE, fig.width = 10}
notebook %>%
select(-product, -display_type, -strage_type) %>%
pairs(,panel = panel.smooth)
```
####相関係数行列の確認
プロット図で視覚的に傾向を確認したのち、相関係数行列を確認する。
グラフで確認した通り、ほとんどの項目間について相関係数が高い。
priceを除いた変数間でも相関係数が0.7を超える組み合わせも多く、モデリングの際には多重共線性が発生しないように注意する。
```{r, echo = FALSE, warning = FALSE ,message = FALSE, fig.width = 10}
notebook %>%
select(-product, -display_type, -strage_type) %>%
cor()
```
###製品ごとの価格
製品について価格を整理するとき、その価格を特徴付ける要素や消費者が最も考慮する要素との関係性がわかるように気をつける。
macbook系の製品を購入する際に重要な要素となるディスプレイに焦点を当てて価格を整理した。
macbook airではretinaディスプレイを搭載しているものはなく、価格も抑えられている。
macbook proは5製品のうち4製品がretinaディスプレイに対応しており、価格帯も幅が広い。
retinaを搭載していない製品はmacbook airと同じ価格帯に設定されている。
airでもproでもないmacbookは2製品ともretinaディスプレイで価格帯はmackbook proのミドルクラスと同じような価格設定である。
```{r, echo = FALSE, warning = FALSE ,message = FALSE, fig.width = 10}
price.graph <- ggplot(notebook, aes(x = product, y = price, label = paste("¥",price), color = factor(paste(display_type,display_size)))) +
geom_point(size = 4) +
geom_text(size = 3, vjust = 1, hjust = -0.2) +
labs(title = "製品価格", x = "製品", y = "価格（円）", colour = "ディスプレイ") +
scale_y_continuous(label = comma)
show(price.graph)
```
###製品ごとのスペック
PCスペックについて、主要な要素であるCPU、メモリ、ストレージにディスプレイの要素を加えて整理した。
先ほどの製品カテゴリ別の価格帯のグラフを合わせて見ることで、妥当な価格設定の製品を探すことができる。
ディスプレイのサイズとretinaかどうかによって、スペックも概ね決まっている。
15.4インチのretinaディスプレイを搭載したハイエンド向けのmacbook proは価格も高いが、スペックも群を抜いて高く設定されている。
13.3インチのretinaディスプレイを搭載したmacbook proは価格とスペックのバランスがよく、macbook系製品の中核として設計されていると推察できる。
macbook airについてはスペックよりもそのコンパクトが特徴であるため、他の製品と比較するとスペックは全体的に劣るが価格も低く抑えられている。
airでもproでもないmacbookはメモリこそ8GBを搭載しているがCPUが弱く、ミドルクラスの製品を購入するならmacbook proを選択すべきである。
```{r, echo = FALSE, warning = FALSE ,message = FALSE, fig.width = 10}
spec.graph <- ggplot(notebook, aes(x = cpu_clock * cpu_core_cnt, y = memory_size, size = strage_volume, color = factor(paste(display_type,display_size)), label = paste(product,"(¥",price,")"))) +
geom_jitter(position = position_jitter(width = 0.3, height = 0)) +
geom_text(size = 3, vjust = 2, hjust = 1, angle = 45) +
scale_x_continuous(limits=c(0, 11),breaks = seq(0, 10, 2.5)) +
scale_y_continuous(limits=c(0, 17),breaks = seq(0, 16, 4)) +
labs(title = "製品スペック", x = "コア数×クロック周波数（GHz）", y = "メモリ容量（GB）", colour = "ディスプレイ", size = "ストレージ容量（GB）")
show(spec.graph)
# grid.arrange(price.graph, spec.graph, ncol = 2)
```
-----
##課題2.macbook製品の価格モデルを作成し、検証せよ。
###価格モデルの作成
価格に影響を与えると考えられる要素を考え、交互作用を考慮してモデリングを行う。
ディスプレイ、CPU、ストレージについてはそれぞれに関する2つの要素間に交互作用を想定している。
- ディスプレイの種類
- ディスプレイのサイズ（inch）
- メモリ容量（GB）
- CPUのコアの数
- CPUのクロック周波数（GHz）
- ストレージの種類
- ストレージ容量（GB）
```{r, echo = FALSE, warning = FALSE ,message = FALSE, fig.width = 10, include = FALSE}
notebook.res <- glm(price ~ display_type * display_size +
memory_size +
cpu_core_cnt * cpu_clock +
strage_type * strage_volume -
display_type -
display_size -
cpu_core_cnt -
cpu_clock -
strage_type -
strage_volume + 0,
family = gaussian(link = "identity"),
data = notebook)
notebook.res.best <- stepAIC(notebook.res)
```
####モデル選択
上記の条件でモデリングを行い、AICが最小になる下記のモデルを選択した。
ディスプレイ、CPU、ストレージについては関連する項目の交互作用を想定し、何も存在しない場合は価格は0円とできるため切片は0としてモデリングを行った。
回帰係数はすべて正の値となっているため、懸念されていた多重共線性は回避できている。
回帰係数の信頼度についても、すべてにおいてp値は0.01以下であるのでどのファクターもモデル構築に必要であると判断した。
ディスプレイがretinaがそうでないかについては価格への大きな影響はなく、ストレージのタイプがhard_drive型かflash型かの違いが大きな影響を持つことがわかった。
ディスプレイのサイズはretinaかそうでないかはメモリやCPUのスペックに影響を与えるため、ディスプレイが異なることによる価格の変動はこれらのスペックが良くなることで間接的に説明されると考える。
```{r, echo = FALSE, warning = FALSE ,message = FALSE, fig.width = 10}
summary(notebook.res.best)
```
####モデル評価
残差を確認し、モデルの妥当性を評価する。
4つの残差グラフから、このモデルにおいてはハイスペックの製品（product idが10,11,12）ほど予測を外しやすいことがわかる。
残差のQ-Qプロットはほぼ直線になっており、モデリングの際に誤差構造をガウス分布とした判断は正しいと考える。
特に15.4インチのmacbook proの2つの製品の逸脱度が高く、共にクックの距離が1以上であることから、これらのデータがモデルの精度を下げていると言える。
```{r, echo = FALSE, warning = FALSE ,message = FALSE, fig.width = 10}
par(mfrow=c(2,2))
plot(notebook.res.best)
```
各要素の回帰係数をグラフ化した。ドットは推定値で、ラインの幅は1標準誤差範囲を示す。
メモリとCPUのコア数×クロック収差数については標準偏差が大きく、予測値にブレが発生する原因と考えられる。
```{r, echo = FALSE, warning = FALSE ,message = FALSE, fig.width = 10}
coefplot(notebook.res.best)
```
####製品別の精度確認
12個の製品について、製品種別ごとにわかるように誤差のグラフを作成した。
予測値は製品価格に対して97.5 %から102.9%の範囲に収まり、最大誤差は3%未満であるため概ね精度の高いモデルができたと考えられる。
ただし、12個のデータに対してモデルを構築する変数が6つ（交互作用項を含む）であるため、実運用の際はオーバーフィッティングしてしまっている可能性に留意する必要が有る。
```{r, echo = FALSE, warning = FALSE ,message = FALSE, fig.width = 10}
predict <- round(predict(notebook.res.best, notebook[,-1], type="response"),0)
diff <- round(predict - notebook$price, 0)
result <- cbind(as.character(notebook$product),notebook$price,predict,diff)
colnames(result) <- c("product","price","predict","diff")
result <- as.data.frame(result)
result$price <- as.integer(as.character(result$price))
result$predict <- as.integer(as.character(result$predict))
result$diff <- as.integer(as.character(result$diff))
result$diff_per <- round(result$predict / result$price,3)
diff_per.graph <- ggplot(result, aes(x = as.integer(rownames(result)), y = diff_per ,color = product, label = paste(sprintf("%1.1f%%",diff_per*100),"(",diff,")"))) +
#  geom_line() +
geom_point(size = 3) +
geom_text(vjust = 2, hjust = 0.5, size = 3) +
scale_x_continuous(limits=c(1, 12),breaks = seq(1, 12, 1)) +
scale_y_continuous(limits=c(0.95, 1.05),breaks = seq(0.95, 1.05, 0.01), labels = percent) +
geom_abline(intercept = 1, slope = 0) +
labs(title = "予測値と実際の価格の比", x = "プロダクトID", y = "比率", colour = "製品種別")
show(diff_per.graph)
```
-----
*以上*
